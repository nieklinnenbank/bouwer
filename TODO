[general]
- Rework Configuration layer: simply. remove the multiple ConfigTree's.
  Replace it with either: a builder to re-run multiple times with a Config item set, e.g.:
    RunWith(conf.BUILD = 'HOST')
    RunWith(conf.BUILD = 'TARGET')
  Or it is possible to design it at the commandline level, e.g. bouw build:BUILD=HOST build:BUILD=TARGET
- Improve performance of C header includes dependency discovery. Reuse the .d files generated by the
  C/C++ compiler. This saves the time of running cpp on all files initially.

[features]
- implement daemon mode. watch a directory and build on change
  see https://pypi.python.org/pypi/watchdog
- MenuConfig: improve layout, highlighting
- bouw --oldconfig like Kbuild, or call it bouw --import-config.
  first load the "new" default configuration, and
  then for each "old" config item, set the value in the current config.
- the .bouwconf files should NOT contain hardcoded path= locations. Use None for bouwer's base config dir.
  This makes it easier to supply preconfigured configurations, like the defconfig's in Kbuild.
- Make Action event hooks more generic.
  - Running a unit tester on each completed .c file Action
  - output plugins should just use the same mechanism as the unit tester hooks
  - bouw -f --full should print the commands BEFORE the Action executes...
    We do want builders to execute before output plugin in case of the pretty output,
    e.g. because they update the configuration items/output result
- Better Kconfig syntax support, e.g.: if ITEM, select, menu, full depends expressions: ( ) && || !
- Builder for Sphinx
- CheckCFlags builder
- Support generating a dynamic list of build targets for output in -h, and also include the python """ comments """ in the output!
- CheckProgram()
- a python function Action should be able to return at least Action tags or update configuration...
    - it cannot at the moment because it is a separate process.
    - maybe just start it in a thread if the Action is a function?
- Extended library support:
    - Both static and shared libraries.
    - Library/UseLibrary: should allow a subpath for library includes...
        e.g. a library may have an 'include/' in its sub directory.
    - Libraries can also link with other libraries?
    - Library makes both a static and shared library.
        - StaticLibrary
        - SharedLibrary
- Support for other languages, like Java.
- Lint() builder from FreeNOS, which has predefined config, which is default false. FreeNOS enables it.
- localizable configuration text/titles?
- implement a --pretend mode, which doesn't really execute commands, but prints Actions
- CheckCompiler could try the next available C compiler if the current one failed.
- More configuration frontends:
    - argparse autotools frontend: e.g. --with-feature=yes
    - qt4 graphical gui
    - html web based frontend: HttpConfig (including build output, e.g. cherrypy)

[bugs/limitations]
- UseLibrary() is not able to "transfer" to subdirectories, e.g. a Program() and Object()'s in separate dirs...

[compatibility]
- Different python virtual machines: PyPy, Jython
- Test on more OS platforms
- package bouwer correctly: http://www.scotttorborg.com/python-packaging/everything.html
- .tar.gz/.md5/.sha256 release
- Windows + MSI installer?
- IDE integration, e.g. eclipse

[testing/quality]
- circular loop detection in the ActionManager.submit()
- python doctest in unit tester.
- test bouwer on these projects:
    - Apache httpd + apr
    - FreeNOS 0.0.5
    - Minix?
    - Linux?
- continuous integration to maintain compatibility e.g. jenkins-ci.org
- unit tester coverage for all bouwer core files and plugins
- use set_default() for dicts...
- if a Worker got an exception, terminate Bouwer.
