[bugs]
- #include "config.h" in hello does not generate a config.h dependency.... why?

[menuconfig]
- Check with FreeNOS:
    - ConfigList: if Value is None, then only give its keywords a childs, not the options.
        e.g. CC incpath override only (no default set)

    +/- trees fix, also HOST and TARGET should work
- layout fixing
- keyboard shortcuts: Y/N/Enter/ESC, UP, DOWN, etc

[FOR RELEASE]

--> PyPy compatibility... Jython, CPython, etc

--> bouw --oldconfig is needed, to sync a currently active configuration with a newer updated Bouwconfig....
    bouw --update-config or bouw --import-config or something, with --oldconfig as an alias

--> bouw -f --full should print the commands BEFORE the Action executes...
    --> change the ActionEvents stuff for it. We do want builders to execute before output plugin in case of the pretty output, e.g. because they update the configuration items/output result

--> the .bouwconf files should NOT contain hardcoded path= locations. Use None for bouwer's base config dir.

==> UseLibrary() is not able to "transfer" to subdirectories, e.g. a Program() and Object()'s in separate dirs...

==> support these projects:
+ nano
+ apr
- httpd + apr
- FreeNOS 0.0.5

--> Kconfig:
    - the if ITEM statement, just adds a depends on for each inside the if
    - the select statement, reverse dependency
    - depends on expressions: ( ) && || !

==> DOCUMENATION WITH SPHINX
    --> also do sphinx-apidocs tool, to autogenerate the module docs.
    --> make a builder for it. Sphinx().

==> Let FreeNOS 0.0.5 compile with Bouwer, on all platforms!
    ==> ConfigHeader() should include all version information for FreeNOS...
    ==> BUILDROOT, BUILDPATH and also in the incpath...
        ==> TREE contains the current tree name.
        ==> BUILDROOT is a prefix for the tree.
==> For the images:
    --> Bouwer does not support inter-configtree dependencies.
        --> if the host does need to run something for a target system file, it should be a builder
    --> bouw build -> makes all programs
    --> bouw iso --> only in the HOST tree it will generate a filesystem and a iso


==> CheckFlags?? Check for a C compiler flag like autoconf, and remove it if not?
    ==> Extend the CheckCompiler?
    ==> Configuration can be changed by builders
    --> if so, it should be tainted, and save()'ed at the end of bouwer execution
    --> but with the same modification timestamp as when bouwer opened it
    --> because we KNOW FOR SURE that all config changes are synced to the builder / action execution in this invoke of bouwer
    --> if an (external) configuration edit is done, then the modification timestamp is updated, and rebuilds will be done accordingly.
    ==> usefull for e.g. CheckFlag(), or TryCFlag()

- Better support path changing for tree's. maybe like: Support BUILDROOT, BUILDPATH?

==> use set_default() for dicts...
==> check lineconfig better, 
    (*) Support fully overrides in a configtree.
        - Support to override a ConfigList, e.g. add items to CC, change them, or also remove them should work.
    (*) Better detect need to rebuild, e.g. changed configs.
        (*) detect if the Bouwconfig changed to rebuild???
==> 'make oldconfig'

[features]
- Support generating a dynamic list of build targets for output in -h, and also include the python """ comments """ in the output!
- CheckProgram()
- a python function Action should be able to return at least Action tags or update configuration...
    - it cannot at the moment because it is a separate process.
    - maybe just start it in a thread if the Action is a function?


- Unit Testers / Something or some plugin to run unit test hooks.
    ==> Bouwer should have a more generic mechanism to hook into actions of other builders
    ==> the CPPCheck() plugin could hook into the Actions generated by Object, Library, etc
	==> on ActionEvent.FINISH it would schedule a new Action, or do the check directly...
	==> better to schedule, because that allows parallelism.
    ==> Also CPPCheck() should have a pre-shipped ConfigBool() to enable/disable it?

- Extended library support:
    - Library/UseLibrary: should allow a subpath for library includes...
        e.g. a library may have an 'include/' in its sub directory.
    - Libraries can also link with other libraries....
    - Library makes both a static and shared library.
        - StaticLibrary
        - SharedLibrary

- Support for extended 'depends on' expressions in the Bouwconfig files.

- Support for other languages, like Java.
- Lint() builder from FreeNOS, which has predefined config, which is default false. FreeNOS enables it.
  --> this way a project can very fast enable full checks.
- make oldconfig -> first load the "new" default configuration, and
  then for each "old" config item, set the value in the current config.
- implement lazy plugin loading
  --> only load plugin builders, when they are called, such that not ALL plugins
      are loaded at startup, when they aren't needed!
  --> how much time do we save?
- make a builder for sphinx
- implement daemon mode --> watch a directory and build on change
    --> see https://pypi.python.org/pypi/watchdog
- implement a --pretend mode, which doesn't really execute commands, but prints Actions
- CheckCompiler could try the next available C compiler if the current one failed.
- localizable configuration text/titles?
- configuration frontends:
    - curses menuconfig
    - argparse autotools frontend: e.g. --with-feature=yes
    - qt4 graphical gui
    - html web based frontend: HttpConfig (including build output, e.g. cherrypy)
- IDE integration, e.g. eclipse
- builders pre/post builder hook
    - e.g. static code checks for C programs, which must happen on every invocation of e.g. the Object() builder
    - check must also happen on header files plz!

[compatibility]
- require python 2.7, make explicit check in bouw.py
- support python 2.6.1 for MacOSX?
- package bouwer correctly: http://www.scotttorborg.com/python-packaging/everything.html
- .tar.gz/.md5/.sha256 release
- Windows + MSI installer?

[quality]
- builder mesh is hiding the error in the python back trace... we should fix this. put the original Bouwfile in the backtrace!
- python doctest in unit tester.
- circular loop detection in the ActionManager.submit()
- if a Worker got an exception, terminate Bouwer.
- unit tester for all source files
- static source checkers
- test bouwer on more existing projects
    - apache
    - minix
    - gcc
    - linux kernel
- test bouwer on all interesting operating systems, compilers, projects
    --> we need integration software, e.g. jenkins-ci.org
