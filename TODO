[FOR RELEASE]

==> RequireBouwer('1.0.0') or something

==> perhaps we can also support default build target:

    Bouwfile:

        Program('hello')

  Bouwer should then add these builders to the default build target

==> also error when a non-existing target is choosen

==> ConfigHeader() in include/. Test it.
    ==> and then specify in incpath too?

==> Unit Testers / Something or some plugin to run unit test hooks.
    ==> Bouwer should have a more generic mechanism to hook into actions of other builders
    ==> the CPPCheck() plugin could hook into the Actions generated by Object, Library, etc
	==> on ActionEvent.FINISH it would schedule a new Action, or do the check directly...
	==> better to schedule, because that allows parallelism.
    ==> Also CPPCheck() should have a pre-shipped ConfigBool() to enable/disable it?

==> CheckFlags?? Check for a C compiler flag like autoconf, and remove it if not?
    ==> Extend the CheckCompiler?
    ==> Configuration can be changed by builders
    --> if so, it should be tainted, and save()'ed at the end of bouwer execution
    --> but with the same modification timestamp as when bouwer opened it
    --> because we KNOW FOR SURE that all config changes are synced to the builder / action execution in this invoke of bouwer
    --> if an (external) configuration edit is done, then the modification timestamp is updated, and rebuilds will be done accordingly.
    
    ==> usefull for e.g. CheckFlag(), or TryCFlag()

==> use set_default() for dicts...

==> progressbar :D

==> check lineconfig better, 
    (*) Support fully overrides in a configtree.
        - Support to override a ConfigList, e.g. add items to CC, change them, or also remove them should work.
    (*) Better detect need to rebuild, e.g. changed configs.
        (*) detect if the Bouwconfig changed to rebuild???

==> 'make oldconfig'

==> UseLibrary applies to all Program()s in that Bouwfile.... is that ok?
    --> what if the user wants multiple Program()s in one directory... do we support that?

    ==> keep it simple. For now UseLibrary applies to one directory.
    ==> Program, Library, Object and even UseLibrary can be extended to limit to a specific binary.

==> Library/UseLibrary: should allow a subpath for library includes...
    e.g. a library may have an 'include/' in its sub directory.

==> Library makes both a static and shared library.
    ==> StaticLibrary
    ==> SharedLibrary

- circular loop detection in the ActionManager.submit()
- Better support path changing for tree's. maybe like: Support BUILDROOT, BUILDPATH?

==> python doctest in unit tester.

==> Dependency system could be improved.... especially the caching is not clean..

(*) Ensure high quality for release
    (*) builder mesh is hiding the error in the python back trace... we should fix this. put the
        original Bouwfile in the backtrace!

    (*) fix error messages in plugin errors, especially on unknown attributes:
        Traceback (most recent call last):
          File "/home/fox/Repositories/Bouwer.git/source/bouwer/config.py", line 159, in __getattr__
              return self.__dict__[name]

    (*) unittester is OK

==> Test bouwer on example projects:
    + GNU nano
    - Apache
    - VLC
    - Linux Kernel?

[features]
- Support for other languages, like Java.
    ==> builders like Object(), Program(), Library() may need to be generic too.

    ==> perhaps the builders should be generic, but the compiler *backends* should be language specific.
        they can look at the extension, and then decide which backend. thats how it works from the commandline too.

--> when unknown dependency, the builder execution should be postponed as late as possible, such 
    that the builder has a chance to generate & execute. If the unknown dependency never comes, its an error!

- also depend on the .bouwconf/Configuration changes for builders!
    --> we may need to cache all Action command's... i.e. if the command changed, rebuild
    --> but then what about python functions?
    --> or, timestamp each Config object also


- Support generating a dynamic list of build targets for output in -h, and also include the python """ comments """ in the output!        

- Lint() builder from FreeNOS, which has predefined config, which is default false. FreeNOS enables it.
  --> this way a project can very fast enable full checks.

- make oldconfig -> first load the "new" default configuration, and
  then for each "old" config item, set the value in the current config.

- TODO: what if the developer wishes to override CC generic configuration?
  e.g. set the include path to './myincludes' for *ALL* compilers?

  --> just add it to the incpath keyword in CC:

  config CC
    keywords
      incpath = includes tests/includes libs/includes whatever/includes

  In GCC/CLANG/..., its possible to do even incpath += myinc blabla/foo/bar/zzz

- implement lazy plugin loading
  --> only load plugin builders, when they are called, such that not ALL plugins
      are loaded at startup, when they aren't needed!
  --> how much time do we save?

- To make a whole configuration item unmodifyable, simply mark it read-only:
  config FREEBSD
        bool FreeBSD OS
        readonly
        help
          This item is True when FreeBSD is detected with CheckOS()

- make a builder for sphinx

- implement simple cherrypy http frontend, e.g. for config and building
    --> do this with threading

- implement daemon mode --> watch a directory and build on change
    --> see https://pypi.python.org/pypi/watchdog

- implement a --pretend mode, which doesn't really execute commands, but prints Actions

- CheckCompiler could try the next available C compiler if the current one failed.

- localizable configuration text/titles?

 status output modules:
    + verbose full command output:    gcc -o foo.o foo.c -Wall
    +/- fancified short command output: CC  foo.c
    + progress bar output:            [#######----------------] 33%
    + quiet output:
    + logfile output: build.log
- configuration frontends:
    + stdio fgets
    - curses menuconfig
    - argparse autotools frontend: e.g. --with-feature=yes
    - qt4 graphical gui
    - html web based frontend: HttpConfig
- http frontend for build output too.
    - e.g. an http daemon mode plugin, which has a config + output plugin
- Builders:
    - ISO: make an ISO image
    - ZIP: make a zip file
    - TAR: make a tar file

- IDE integration, e.g. eclipse

- builders pre/post builder hook
    - e.g. static code checks for C programs, which must happen on every invocation of e.g. the Object() builder
    - check must also happen on header files plz!
- implement plugin.invoke('output', ...)

[compatibility]

- require python 2.7, make explicit check in bouw.py

- support python 2.6.1 for MacOSX?

- package bouwer correctly: http://www.scotttorborg.com/python-packaging/everything.html

- .tar.gz/.md5/.sha256 release

- Windows + MSI installer?

[quality]
- unit tester for all source files
- static source checkers
- test bouwer on existing projects
    - replace its build system completely with bouwer, e.g. apache or gcc or whatever
    - final test is the linux kernel

- test bouwer on all interesting operating systems and compilers and projects
    --> we need integration software, e.g. jenkins-ci.org

