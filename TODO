[FOR RELEASE]

(*) Better detect need to rebuild, e.g. changed configs.
    (*) detect if the Bouwconfig changed to rebuild???

===> THis goes wrong in c/demo/library, because Object() is scheduled later than Library....

 22     ConfigHeader('config.h')
  23     Object(conf.LIBDUMMY_UTIL, 'util.c')
   24     Library(conf.LIBDUMMY, [ 'lookup.c' ])

==> CheckFlags?? Check for a C compiler flag like autoconf, and remove it if not?
    ==> Extend the CheckCompiler?

==> improve the output of bouwer, especially debug when running actions etc...

(*) Support fully overrides in a configtree.
    - Support to override a ConfigList, e.g. add items to CC, change them, or also remove them should work.

==> Dependency system could be improved.... especially the caching is not clean..
==> Monitor filesystem for changes, all platforms:
    ==> https://pypi.python.org/pypi/watchdog

(*) Ensure high quality for release

    (*) UseLibrary is a MESS.
        --> it should all use the compiler backend.
        --> it should work also with -Iinclude in incpath, e.g. a ConfigHeader() in include/Bouwfile
            now it gives an error:
      File "/home/fox/Repositories/Bouwer.git/source/bouwer/builder.py", line 155, in _invoke
          return self.builder.execute_any(*arguments, **keywords)
            File "/home/fox/Repositories/Bouwer.git/source/bouwer/plugins/UseLibrary.py", line 83, in execute_any
                tmp._keywords['ldpath']  += ':' + os.path.dirname(target.absolute)
                KeyError: 'ldpath'

    (*) builder mesh is hiding the error in the python back trace... we should fix this. put the
        original Bouwfile in the backtrace!

    (*) fix error messages in plugin errors, especially on unknown attributes:
        Traceback (most recent call last):
          File "/home/fox/Repositories/Bouwer.git/source/bouwer/config.py", line 159, in __getattr__
              return self.__dict__[name]

    (*) unittester is OK

[features]
- make a RequireVersion() builder or similar, to check for bouw version
- Support for other languages, like Java.
    ==> builders like Object(), Program(), Library() may need to be generic too.

    ==> perhaps the builders should be generic, but the compiler *backends* should be language specific.
        they can look at the extension, and then decide which backend. thats how it works from the commandline too.

--> when unknown dependency, the builder execution should be postponed as late as possible, such 
    that the builder has a chance to generate & execute. If the unknown dependency never comes, its an error!

- also depend on the .bouwconf/Configuration changes for builders!
    --> we may need to cache all Action command's... i.e. if the command changed, rebuild
    --> but then what about python functions?
    --> or, timestamp each Config object also

- perhaps we can also support default build target:

    Bouwfile:

        Program('hello')

  Bouwer should then add these builders to the default build target

- Support generating a dynamic list of build targets for output in -h, and also include the python """ comments """ in the output!        

- Lint() builder from FreeNOS, which has predefined config, which is default false. FreeNOS enables it.
  --> this way a project can very fast enable full checks.

- make oldconfig -> first load the "new" default configuration, and
  then for each "old" config item, set the value in the current config.

- TODO: what if the developer wishes to override CC generic configuration?
  e.g. set the include path to './myincludes' for *ALL* compilers?

  --> just add it to the incpath keyword in CC:

  config CC
    keywords
      incpath = includes tests/includes libs/includes whatever/includes

  In GCC/CLANG/..., its possible to do even incpath += myinc blabla/foo/bar/zzz

- implement lazy plugin loading
  --> only load plugin builders, when they are called, such that not ALL plugins
      are loaded at startup, when they aren't needed!
  --> how much time do we save?

- To make a whole configuration item unmodifyable, simply mark it read-only:
  config FREEBSD
        bool FreeBSD OS
        readonly
        help
          This item is True when FreeBSD is detected with CheckOS()

? UseLibrary should look in the ActionTree to fill in -L <path>
    --> if two libraries with the same name, then solve like this:
        library/sub/path/libfoo.a
        library/other/path/libfoo.a
        UseLibrary(conf.FOO, ['sub/path/libfoo', 'libbar'])

    --> add a config option to also add -I or -isystem for libraries, ie:
        BoolConfig('GCC',
                    libinc = '.')

        this will make a -I to the directory of the library itself.
        if the user has like a 'include/' dir for every source lib dir, then:
        
        BoolConfig('GCC',
                    libinc = 'include')

- make a builder for sphinx

- implement simple cherrypy http frontend, e.g. for config and building
    --> do this with threading

- implement daemon mode --> watch a directory and build on change

- implement a --pretend mode, which doesn't really execute commands, but prints Actions

- implement on-the-fly action generation from Workers, to support source generators

- CheckCompiler could try the next available C compiler if the current one failed.

- localizable configuration text/titles?

 status output modules:
    + verbose full command output:    gcc -o foo.o foo.c -Wall
    +/- fancified short command output: CC  foo.c
    + progress bar output:            [#######----------------] 33%
    + quiet output:
    + logfile output: build.log
- configuration frontends:
    + stdio fgets
    - curses menuconfig
    - qt4 graphical gui
    - html web based frontend
- http frontend for build output too.
    - e.g. an http daemon mode plugin, which has a config + output plugin

- implement CheckHeader, CheckLibrary, CheckCompiler
    --> should go in parallel
    --> maybe this needs inspect() in Plugin's, to decide if a plugin agrees on the current config...
        --> or can the config_input()/config_output() work?

- IDE integration, e.g. eclipse

- builders pre/post builder hook
    - e.g. static code checks for C programs, which must happen on every invocation of e.g. the Object() builder
    - check must also happen on header files plz!
- implement plugin.invoke('output', ...)

[compatibility]

- require python 2.7, make explicit check in bouw.py

- support python 2.6.1 for MacOSX?

- package bouwer correctly: http://www.scotttorborg.com/python-packaging/everything.html

- .tar.gz/.md5/.sha256 release

- Windows + MSI installer?

[quality]
- unit tester for all source files
- static source checkers
- test bouwer on existing projects
    - replace its build system completely with bouwer, e.g. apache or gcc or whatever
    - final test is the linux kernel

- test bouwer on all interesting operating systems and compilers and projects
    --> we need integration software, e.g. jenkins-ci.org

