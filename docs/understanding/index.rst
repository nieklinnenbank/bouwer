Understanding Bouwer
********************

This document describes the architecture of Bouwer and implementation details.

Definition of a Build Automation System
=======================================

* Configuration
* Instruction
* Execution

Configuration
-------------

Holds variables which influence the flow of instructions. Users should be able to 
create, save and load configurations. It is possible to have multiple configuration sets.
Variables inside each configuration may be changed by the user.

Instruction
-----------

A build system should have a way to define which work has to be done. Such *instructions* should define:

    * what work needs to be done?
    * what file(s) as input, if any?
    * what file(s) as output, if any?
    * configuration variables as input, if any?
    * configuration variables as output, if any?
    * dependencies on other instructions?

Possible kinds of work are:

    * Compiling a C/C++ program or library
    * Uploading a document to a webserver
    * Generating distribution archives
    * Checking for platform features or versions

Execution
---------

Eventually the build system has to include a way to execute the work defined by instructions.
In general a build system should avoid executing the same work twice. For maximal efficiency,
the build system should execute the work in parallel when possible. 

Bouwer Implementation
=====================

Configuration Layer
-------------------

Bouwer uses `Bouwconfig` files to define configurations. Users can create, modify, load and save
as many configurations as needed. Configuration can describe dependency relations between variables.

Builder Layer
-------------

Bouwer uses `Bouwfiles` containing Builders to describe work instructions. Builders generate
executable actions.

Action Layer
------------

Bouwer has an action layer to execute all actions generated by the builders in parallel.
The main thread distributes the work to a pool of worker processes, which may be on a different CPU core.
